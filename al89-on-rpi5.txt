Almalinux 8.9 on Raspberry Pi 5
===============================

The 8.9 image[1] provided by Almalinux[2] runs perfectly on RPi4 but
the boot code previously in /boot/bootcode.bin has apparently been 
moved into the firmware so replacing bootcode.bin with another
generic boot loader (grub? u-boot?) doesn't work with RPi5.

Raspberry Pi OS[3,4] and Ubuntu[5,6] work on RPi5 (I think both due
to Debian[7,8] "bookworm".)

Rather than go to the trouble of working out how Debian etc manage
this I thought I could leverage the working boot process from RaspiOS
to bring up AL89. Both use systemd and would be similar except for
the kernel versions and firmware. 

I obtained 2024-03-15-raspios-bookworm-arm64.img.xz [4] and
AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw.xz [1].

Uncompressed both with xz:
----
  %  xz -d -c 2024-03-15-raspios-bookworm-arm64.img.xz > \
		/work/2024-03-15-raspios-bookworm-arm64.img
  %  xz -d -c AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw.xz > \
		/work/AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw
----
and used the loop devices to look at the images:
----
  #  losetup -P /dev/loop0 /work/2024-03-15-raspios-bookworm-arm64.img
  #  losetup -P /dev/loop1 /work/AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw
----  

Examining the images
--------------------

Use fdisk (or parted /dev/loop0 print) to list the partitions:
----
  # fdisk -l /dev/loop0
	Disk /dev/loop0: 5.6 GiB, 5951717376 bytes, 11624448 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disklabel type: dos
	Disk identifier: 0x617a2abd

	Device       Boot   Start      End  Sectors  Size Id Type
	/dev/loop0p1         8192  1056767  1048576  512M  c W95 FAT32 (LBA)
	/dev/loop0p2      1056768 11624447 10567680    5G 83 Linux

  # fdisk -l /dev/loop1
	Disk /dev/loop1: 2.8 GiB, 2936012800 bytes, 5734400 sectors
	Units: sectors of 1 * 512 = 512 bytes
	Sector size (logical/physical): 512 bytes / 512 bytes
	I/O size (minimum/optimal): 512 bytes / 512 bytes
	Disklabel type: dos
	Disk identifier: 0x4ce3562e

	Device       Boot  Start     End Sectors  Size Id Type
	/dev/loop1p1 *      8192  593919  585728  286M  c W95 FAT32 (LBA)
	/dev/loop1p2      593920 5476351 4882432  2.3G 83 Linux
----

Mount the two systems root file systems (partition 2) under /pi and /al:
----
  # mount /dev/loop0p2 /pi
  # mount /dev/loop1p2 /al
----

Examining the RaspiOS image
---------------------------

Look at /pi/etc/fstab
----
  % cat /pi/etc/fstab
	proc            /proc           proc    defaults          0       0
	PARTUUID=617a2abd-01  /boot/firmware  vfat    defaults          0       2
	PARTUUID=617a2abd-02  /               ext4    defaults,noatime  0       1
----
Note:
  a) the PARTUUIDs are the "Disk identifier: 0x617a2abd" shown in fdisk listing.
  b) the the first (vfat) partition is mounted under /boot/firmware not /boot.

The contents of /pi/boot are
----
  % ls /pi/boot
	cmdline.txt                 initrd.img-6.6.20+rpt-rpi-2712  System.map-6.6.20+rpt-rpi-v8
	config-6.6.20+rpt-rpi-2712  initrd.img-6.6.20+rpt-rpi-v8    vmlinuz-6.6.20+rpt-rpi-2712
	config-6.6.20+rpt-rpi-v8    issue.txt                       vmlinuz-6.6.20+rpt-rpi-v8
	config.txt                  overlays
	firmware                    System.map-6.6.20+rpt-rpi-2712
----
Note: 
  a) /boot/firmware is empty.
  b) cmdline.txt tells it has been moved to firmware/ ditto config.txt :)
  c) rpi5 boots the 6.6.20+rpt-rpi-2712 kernel

Mount firmware partition:
----
  # mount /dev/loop0p1 /pi/boot/firmware
----

List contents of /boot/firmware:
----
  % ls /pi/boot/firmware
	bcm2710-rpi-2-b.dtb       bcm2712d0-rpi-5-b.dtb      fixup_cd.dat      start4cd.elf
	bcm2710-rpi-3-b.dtb       bcm2712-rpi-5-b.dtb        fixup.dat         start4db.elf
	bcm2710-rpi-3-b-plus.dtb  bcm2712-rpi-cm5-cm4io.dtb  fixup_db.dat      start4.elf
	bcm2710-rpi-cm3.dtb       bcm2712-rpi-cm5-cm5io.dtb  fixup_x.dat       start4x.elf
	bcm2710-rpi-zero-2.dtb    bootcode.bin               initramfs_2712    start_cd.elf
	bcm2710-rpi-zero-2-w.dtb  cmdline.txt                initramfs8        start_db.elf
	bcm2711-rpi-400.dtb       config.txt                 issue.txt         start.elf
	bcm2711-rpi-4-b.dtb       fixup4cd.dat               kernel_2712.img   start_x.elf
	bcm2711-rpi-cm4.dtb       fixup4.dat                 kernel8.img
	bcm2711-rpi-cm4-io.dtb    fixup4db.dat               LICENCE.broadcom
	bcm2711-rpi-cm4s.dtb      fixup4x.dat                overlays
----
Note:
  a) firmware/initramfs_2712 is a copy of vmlinuz-6.6.20+rpt-rpi-2712
     ditto  firmware/initramfs_2712 and initrd.img-6.6.20+rpt-rpi-2712
  b) cmdline.txt and config.txt are here

Look at cmdline.txt
----
  % cat /pi/boot/firmware/cmdline.txt

	console=serial0,115200 console=tty1 root=PARTUUID=617a2abd-02 \
	rootfstype=ext4 fsck.repair=yes rootwait quiet \
	init=/usr/lib/raspberrypi-sys-mods/firstboot splash \
	plymouth.ignore-serial-consoles
----
Note:
  a) this is pretty much what gets passed to the kernel from any boot loader.
  b) the root file system is specified by the PARTUUID
  c) init is highjacked by /usr/lib/raspberrypi-sys-mods/firstboot

Firstboot is a shell script that:
 
i) generates a new random disk identifier relabels boot disk
-----
	fdisk "$ROOT_DEV" > /dev/null <<EOF
		x
		i
		0x$DISKID
		r
		w
		EOF
------
ii) updates /etc/fstab and /boot/firmware/cmdline.txt.
iii) generates new sshd host keys.

Examinig the Almalinux image
----------------------------
The /boot directory is empty. 
Look at /al/etc/fstab
----
  % cat /al/etc/fstab
	UUID=483124e4-c53c-4ad2-86db-a86263aac2b1  / ext4    defaults,noatime 0 0
	UUID=79FC-5897  /boot vfat    defaults,noatime 0 0
	/swapfile	none	swap	defaults	0	0
----
Note:
  a) first partition is mounted under /boot
  b) swap is a file 

Mounting /dev/loop1p1 on /al/boot shows a normal looking /boot
but config.txt is empty and a /boot/grub/ directory with a default
entry.
I have no idea how the Pi boot process gets to grub on a Pi4 
presumably via bootcode.bin and one of the start*.elf binaries.
(I should look it up. :)

At this point I don't want /al/boot so I deleted the contents
----
  # rm -rf /al/boot/*
  # umount /al/boot
----
Note: I could reformat the partition with mkfs.vfat(8)

Recreate the raspios arrangement
----
  # mkdir /al/boot/firmware
  # mount /dev/loop1p1 /al/boot/firmware
  # tar -C /pi -c -p -S --selinux --xattrs -f - boot \
	tar -C /al -xv -p -S --selinux --xattrs -f -
----

Now we are using a different kernel (6.6 cf 6.1) and firmware and have to modify
the AL8 root file system.
a)  /lib/modules (modules-load.d is empty on both)
b)  /lib/firmware
c)  /lib/modprobe.d

The plan is to move the AL8 versions of -el8 and copy the
contents of the PiOS versions to the location.
----
  # mv /al/lib/modules /al/lib/modules-el8
  # mv /al/lib/firmware /al/lib/firmware-el8
  # mv /al/lib/modprobe.d /al/lib/modprobe.d-el8
  # tar -C /pi/lib -c -p -S --selinux --xattrs -f - modules firmware modprobe.d \
	tar -C /al/lib -xv -p -S --selinux --xattrs -f -
----
Under /etc we have
a)  /etc/modprobe.d
b)  /etc/modules-load.d
c)  /etc/modules (on PiOS)

On AL8 modprobe.d has two entries - for tuned and firewalld 
which could be left but we will disable. On PiOS there are
module blacklist which we will use.
On AL8 modules-load.d is empty.

----
  # mv /al/etc/modprobe.d /al/etc/modprobe.d-el8
  # mv /al/etc/modules-load.d /al/etc/modules-load.d-el8
  # tar -C /pi/etc -c -p -S --selinux --xattrs -f - modules-load.d modprobe.d modules \
	tar -C /al/etc -xv -p -S --selinux --xattrs -f -
----
Note: /etc/modules-load.d/modules.conf -> /etc/modules
      and loads i2c-dev which might be use to load firmware at runtime?

Clean up mess
-------------
Have to reconfigure AL8 for these changes
a)  /al/boot/firmware/cmdline.txt
b)  /al/etc/fstab

Will change cmdline.txt to reflect AL8 root partition UUID
and remove unused options

/al/boot/firmware/cmdline.txt
----
  console=serial0,115200 console=tty1 root=PARTUUID=4ce3562e-02 \
  rootfstype=ext4 fsck.repair=yes rootwait noquiet nosplash \
  plymouth.ignore-serial-consoles
----
I get an error message for "noquiet" in dmesg:
----
	Unknown kernel command line parameters "noquiet",
	 will be passed to user space."
----
so probably can be removed.

Replace /etc/fstab on Al8

/al/etc/fstab
----
  PARTUUID=4ce3562e-01  /boot/firmware  vfat    defaults          0       2
  PARTUUID=4ce3562e-02  /               ext4    defaults,noatime  0       1
----
Note: systemd appears to mount /proc anyway so omitted.

Optionally remove the unused /al/swapfile as well.

At this point the system would probably boot but a few other things 
can be fixed at this point.

The wifi firmware has to load the regulatory.db which on PiOS
uses the /etc/alternatives arrangement (why?)
----
/usr/lib/firmware/regulatory.db -> /etc/alternatives/regulatory.db
/usr/lib/firmware/regulatory.db.p7s -> /etc/alternatives/regulatory.db.p7s
/usr/lib/firmware/cypress/cyfmac43455-sdio.bin -> /etc/alternatives/cyfmac43455-sdio.bin
----
and from /etc/alternatives
----
/etc/alternatives/regulatory.db -> /lib/firmware/regulatory.db-debian
/etc/alternatives/regulatory.db.p7s -> /lib/firmware/regulatory.db.p7s-debian
/etc/alternatives/cyfmac43455-sdio.bin -> /lib/firmware/cypress/cyfmac43455-sdio-standard.bin
----

We could just replace the link chain but will follow PiOS.
----
 #  ln -s /lib/firmware/regulatory.db-debian /al/etc/alternatives
 #  ln -s /lib/firmware/regulatory.db.p7s-debian /al/etc/alternatives
 #  ln -s /lib/firmware/cypress/cyfmac43455-sdio-standard.bin /al/etc/alternatives
----
Note: these symlinks will be dangling in this environment until you chroot or boot.

Fix localtime on AL8
----
 #  ln -f -s /usr/lib/zoneinfo/Australia/Sydney /al/etc/localtime
----

Edit yum.conf to prevent linux-firmware from updating and trashing
the /usr/lib/firmware from PiOS.

/al/etc/yum.conf
----
	[main]
	gpgcheck=1
	installonly_limit=3
	clean_requirements_on_remove=True
	best=True
	skip_if_unavailable=False
	exclude=linux-firmware*
----
Probably should exclude kernel-* but kernel-tools and kernel-tools-libs
are probably best allowed to update
ie
----
	exclude=kernel-6.1* kernel-core-6.1* kernel-modules-6.1*
----

At this point unless you are running on a Pi its difficult to make
further changes.
a)  remove the cloud-init service and package
b)  change the root password
c)  add new account add to wheel group for sudo

If you are running under PiOS etc you can
----
 #  chroot /al 
 #  yum remove cloud-init
 ...
 #  passwd root
 ...
 #  userdel almalinux
 #  useradd -u 1000 nemo
 #  usermod --append -G wheel nemo
 #  passwd nemo
 ...
 #  exit
-----

otherwise umount the images
----
  # umount /pi/boot/firmware
  # umount /pi
  # losetup -d /dev/loop0

  # umount /al/boot/firmware
  # umount /al
  # losetup -d /dev/loop1
----

You can now copy your modified AL8 image onto a SD card
with the usual warning about the right $SDCARD_DEVICE. :)
----
 #  dd if=/work/AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw \
	of=/dev/$SDCARD_DEVICE bs=1024k
----

I put my sdcard in a USB adaptor and inserted it into a Pi running
PiOS and mounted the partitions on the Pi and chrooted into it
to make the modifications above.

Should be able to boot off the sdcard now.
I noticed that my install the sshd_config was modified (at boot?)
to disallow password authentication.
----
	@(#) /etc/ssh/sshd_config
	....
	PasswordAuthentication no
	....
----
Until you have keys or certificates setup change this to 'yes'

I also ran authselect for the minimal configuration
----
 #  authselect select minimal
----

Further stuff
-------------
Sudo should permit root access to 'nemo'
The ethernet largely configures itself if DHCP is available but wifi
obviously doesn't.
I use nmtui to configure either but nmcli is another way.

Configure the hostname
----
 #  hostnamectl --static set-hostname ruber.lares.dd
----

----
 %  hostnamectl 

   Static hostname: ruber.lares.dd
         Icon name: computer
        Machine ID: e83a224933a943a890e2305e4b1d76a1
           Boot ID: 87fd4687e96f4a989f2673ed33a924a1
  Operating System: AlmaLinux 8.9 (Midnight Oncilla)
       CPE OS Name: cpe:/o:almalinux:almalinux:8::baseos
            Kernel: Linux 6.6.20+rpt-rpi-2712
      Architecture: arm64
----

The contents of /var/log/boot.log and dmesg -T are provided
----
	almalinux89-boot-log.txt
	almalinux89-dmesg.txt
----

[1] https://repo.almalinux.org/almalinux/8/raspberrypi/images/AlmaLinux-8-RaspberryPi-8.9-20231127.aarch64.raw.xz
[2] https://wiki.almalinux.org/documentation/raspberry-pi.html#about-raspberry-pi
[3] https://www.raspberrypi.com/documentation/computers/os.html
[4] https://downloads.raspberrypi.com/raspios_arm64/images/raspios_arm64-2024-03-15/2024-03-15-raspios-bookworm-arm64.img.xz
[5] https://ubuntu.com/download/raspberry-pi
[6] https://cdimage.ubuntu.com/releases/23.10/release/ubuntu-23.10-preinstalled-desktop-arm64+raspi.img.xz
[7] https://raspi.debian.net/
[8] https://raspi.debian.net/tested-images/
